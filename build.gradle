buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true

        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'javax.vecmath:vecmath:1.5.2'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext.configFile = file "build.properties"
configFile.withReader {
    // Load config. It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    File cfg2 = file "BuildCraft/build.properties"
    cfg2.withReader {
        prop.load(it)
    }
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.compat_version
// version = config.compat_version + "-" + new Date().format("yyyy-MM-dd'T'HH-mm-ssZ")
group = "com.mod-buildcraft-compat"
archivesBaseName = "buildcraft" // the name that all artifacts will use as a base. artifacts names follow this pattern: [baseName]-[appendix]-[version]-[classifier].[extension]

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('BuildCraft/buildcraft_resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                buildcraftcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run_server')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                buildcraftcore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'buildcraftcore', '--all', '--output', file('BuildCraft/buildcraft_resources_generated/'), '--existing', file('BuildCraft/buildcraft_resources/')

            mods {
                buildcraftcore {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        java {
            srcDir "common"
            srcDir "BuildCraft/BuildCraftAPI/api"
            srcDir "BuildCraft/common"
            srcDir "BuildCraft/sub_projects/expression/src/main/java"
            srcDir "BuildCraft/sub_projects/expression/src/autogen/java"
        }
        resources {
            srcDir "resources"
            srcDir "BuildCraft/buildcraft_resources"
            srcDir 'BuildCraft/buildcraft_resources_generated'
            srcDir "BuildCraft/BuildCraft-Localization"
            srcDir "BuildCraft/BuildCraftGuide/guide_resources"
            exclude "**/.md" // exclude readme from localization repo
            exclude "pack.png" // exclude from the guide repo
            // Calen: we should not exclude the pack.mcmeta file in buildcraft_resources, or all the resources will be lost
//            exclude "pack.mcmeta" // exclude from the guide repo
        }
    }
    api {
        java {
            srcDir "BuildCraft/BuildCraftAPI/api"
            srcDir "BuildCraft/common"
            srcDir "BuildCraft/sub_projects/expression/src/main/java"
            srcDir "BuildCraft/sub_projects/expression/src/autogen/java"
        }
        resources {
            srcDir "BuildCraft/buildcraft_resources"
            srcDir "BuildCraft/BuildCraftGuide/guide_resources"
            exclude "pack.png" // exclude from the guide repo
            // exclude "pack.mcmeta" // exclude from the guide repo
        }
    }
    test {
        java {
            srcDir "BuildCraft/src/test/java"
            srcDir "BuildCraft/sub_projects/expression/src/test/java"
        }
    }
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
        dir 'libs'
    }

    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    // JEI
    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    // crafttweaker
    maven {
        name 'CraftTweaker'
        url "https://maven.blamejared.com"
        content {
            includeGroup 'com.blamejared.crafttweaker'
        }
    }
    // TOP
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
        content {
            includeGroup 'mcjty.theoneprobe'
            includeGroup 'team.chisel.ctm'
        }
    }
//    maven {
//        name 'tterrag maven'
//        url "https://maven.tterrag.com/"
//    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'

    // Examples using mod jars from ./libs

    compileOnly fg.deobf("mezz.jei:jei-" + config.mc_version + ":" + config.jei_version + ":api")
    runtimeOnly fg.deobf("mezz.jei:jei-" + config.mc_version + ":" + config.jei_version)

    compileOnly fg.deobf("curse.maven:jade-324717:3467445")
    runtimeOnly fg.deobf("curse.maven:jade-324717:3467445")

//    compileOnly fg.deobf("blank:ae2-${mc_version}:11.7.6")
//    runtimeOnly fg.deobf("blank:ae2-${mc_version}:11.7.6")

    compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.16.5:7.1.2.479")
    runtimeOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.16.5:7.1.2.479")

    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.4-22:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.4-22")

//    runtimeOnly fg.deobf("net.sengir.forestry:forestry_${minecraft_version}:${forestry_version}")
//    runtimeOnly fg.deobf("net.sengir.forestry:forestry_${minecraft_version}:${forestry_version}")

    compileOnly("javax.vecmath:vecmath:1.5.2")
    runtimeOnly("javax.vecmath:vecmath:1.5.2")
    compileOnly("net.sf.trove4j:trove4j:3.0.3")
    runtimeOnly("net.sf.trove4j:trove4j:3.0.3")

    jarJar(group: 'net.sf.trove4j', name: 'trove4j', version: '[3.0.3,)') {
        jarJar.pin(it, '3.0.3')
    }
    jarJar(group: 'javax.vecmath', name: 'vecmath', version: '[1.5.2,)') {
        jarJar.pin(it, '1.5.2')
    }

    // Testing
    testImplementation "junit:junit:4.12"
    testImplementation 'org.hamcrest:hamcrest:2.2'
//    compileOnly "junit:junit:4.12"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "BuildCraft",
            "Specification-Vendor": "BuildCraft Team",
            "Specification-Version": project.version,
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" :"BuildCraft Team",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs"            : "mixins.buildcraft.json"
        ])
    }
    include '**/**/**/libs/*'
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

jar.enabled = true

// enable Jar-in-Jar
jarJar.enable()

tasks.named('jarJar') {
    // ...
}
